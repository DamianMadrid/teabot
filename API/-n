<ref *1> Converter {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    constructed: true,
    sync: false,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    destroyed: false,
    errored: null,
    closed: false,
    closeEmitted: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: false,
    dataEmitted: false,
    decoder: null,
    encoding: null,
    [Symbol(kPaused)]: null
  },
  _events: [Object: null prototype] {
    prefinish: [Function: prefinish],
    error: [Function: bound onceWrapper] { listener: [Function (anonymous)] },
    done: [Function: bound onceWrapper] { listener: [Function (anonymous)] }
  },
  _eventsCount: 3,
  _maxListeners: undefined,
  _writableState: WritableState {
    objectMode: false,
    highWaterMark: 16384,
    finalCalled: false,
    needDrain: false,
    ending: false,
    ended: false,
    finished: false,
    destroyed: false,
    decodeStrings: true,
    defaultEncoding: 'utf8',
    length: 0,
    writing: false,
    corked: 0,
    sync: true,
    bufferProcessing: false,
    onwrite: [Function: bound onwrite],
    writecb: null,
    writelen: 0,
    afterWriteTickInfo: null,
    buffered: [],
    bufferedIndex: 0,
    allBuffers: true,
    allNoop: true,
    pendingcb: 0,
    constructed: true,
    prefinished: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    errored: null,
    closed: false,
    closeEmitted: false,
    [Symbol(kOnFinished)]: []
  },
  allowHalfOpen: true,
  options: {},
  params: {
    delimiter: ',',
    ignoreColumns: undefined,
    includeColumns: undefined,
    quote: '"',
    trim: true,
    checkType: false,
    ignoreEmpty: false,
    noheader: false,
    headers: undefined,
    flatKeys: false,
    maxRowLength: 0,
    checkColumn: false,
    escape: '"',
    colParser: {},
    eol: undefined,
    alwaysSplitAtEOL: false,
    output: 'json',
    nullObject: false,
    downstreamFormat: 'line',
    needEmitAll: true
  },
  runtime: {
    needProcessIgnoreColumn: false,
    needProcessIncludeColumn: false,
    selectedColumns: undefined,
    ended: false,
    hasError: false,
    error: undefined,
    delimiter: ',',
    eol: undefined,
    columnConv: [],
    headerType: [],
    headerTitle: [],
    headerFlag: [],
    headers: undefined,
    started: false,
    parsedLineNumber: 0,
    columnValueSetter: []
  },
  result: Result { converter: [Circular *1], finalResult: [] },
  processor: ProcessorLocal {
    converter: [Circular *1],
    params: {
      delimiter: ',',
      ignoreColumns: undefined,
      includeColumns: undefined,
      quote: '"',
      trim: true,
      checkType: false,
      ignoreEmpty: false,
      noheader: false,
      headers: undefined,
      flatKeys: false,
      maxRowLength: 0,
      checkColumn: false,
      escape: '"',
      colParser: {},
      eol: undefined,
      alwaysSplitAtEOL: false,
      output: 'json',
      nullObject: false,
      downstreamFormat: 'line',
      needEmitAll: true
    },
    runtime: {
      needProcessIgnoreColumn: false,
      needProcessIncludeColumn: false,
      selectedColumns: undefined,
      ended: false,
      hasError: false,
      error: undefined,
      delimiter: ',',
      eol: undefined,
      columnConv: [],
      headerType: [],
      headerTitle: [],
      headerFlag: [],
      headers: undefined,
      started: false,
      parsedLineNumber: 0,
      columnValueSetter: []
    },
    rowSplit: RowSplit {
      conv: [Circular *1],
      cachedRegExp: {},
      delimiterEmitted: false,
      _needEmitDelimiter: undefined,
      quote: '"',
      trim: true,
      escape: '"'
    },
    eolEmitted: false,
    _needEmitEol: undefined,
    headEmitted: false,
    _needEmitHead: undefined
  },
  [Symbol(kCapture)]: false,
  [Symbol(kCallback)]: null
}
